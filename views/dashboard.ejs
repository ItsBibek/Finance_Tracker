<style>
    .dashboard-card {
        background-color: #fff;
        border-radius: 1rem;
        padding: 1.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        margin-bottom: 1.5rem;
    }

</style>



<div class="row">
    <div class="col-12">
        <h1 style="font-weight: 800; font-size: 2.5rem; color: #4F46E5; margin-bottom: 1rem;">Welcome back, <%= user.name %></h1>
    </div>
</div>

<!-- Financial Summary Cards -->
<div class="row mb-4">
    <div class="col-md-4">
        <div class="dashboard-card text-center">
            <h6 class="text-muted">Total Income</h6>
            <h3 class="fw-bold text-success">Rs <%= formatNepaliCurrency(totalIncome) %></h3>
        </div>
    </div>
    <div class="col-md-4">
        <div class="dashboard-card text-center">
            <h6 class="text-muted">Total Expense</h6>
            <h3 class="fw-bold text-danger">Rs <%= formatNepaliCurrency(totalExpense) %></h3>
        </div>
    </div>
    <div class="col-md-4">
        <div class="dashboard-card text-center">
            <div class="d-flex justify-content-center align-items-center">
                <h6 class="text-muted mb-0 me-2">Total Savings</h6>
                <button class="btn btn-xs btn-primary" data-bs-toggle="modal" data-bs-target="#addSavingsModal" style="padding: 0.1rem 0.4rem; font-size: 0.7rem;">+</button>
            </div>
            <h3 class="fw-bold text-primary">Rs <%= formatNepaliCurrency(totalSavings) %></h3>
        </div>
    </div>
</div>

<!-- Add Savings Modal -->
<div class="modal fade" id="addSavingsModal" tabindex="-1" aria-labelledby="addSavingsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addSavingsModalLabel">Contribute to Savings</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form action="/savings/contribute" method="POST">
        <div class="modal-body">
          <div class="mb-3">
            <label for="savingsAmount" class="form-label">Amount (Rs)</label>
            <input type="number" class="form-control" id="savingsAmount" name="amount" required min="1">
          </div>
          <div class="mb-3">
            <label for="savingsDescription" class="form-label">Description (Optional)</label>
            <input type="text" class="form-control" id="savingsDescription" name="description" placeholder="e.g., Monthly savings">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn btn-primary">Save</button>
        </div>
      </form>
    </div>
  </div>
</div>



<div class="row">
    <!-- Recent Transactions -->
    <div class="col-lg-8">
        <div class="dashboard-card h-100">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5>Recent Transactions</h5>
                <a href="/transactions" class="btn btn-sm btn-outline-primary">View All</a>
            </div>
            <ul class="list-group list-group-flush">
                <% if (transactions.length > 0) { %>
                    <% transactions.slice(0, 5).forEach(function(transaction) { %>
                        <li class="list-group-item d-flex justify-content-between align-items-center px-0">
                            <div>
                                <p class="mb-0 fw-bold"><%= transaction.category %></p>
                                <small class="text-muted"><%= new Date(transaction.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %></small>
                            </div>
                            <span class="fw-bold <%= transaction.type === 'income' ? 'text-success' : 'text-danger' %>">
                                <%= transaction.type === 'income' ? '+' : '-' %> Rs <%= formatNepaliCurrency(transaction.amount) %>
                            </span>
                        </li>
                    <% }); %>
                <% } else { %>
                    <p class="text-center text-muted">No recent transactions.</p>
                <% } %>
            </ul>
        </div>
    </div>

    <!-- Financial Wellness Tips -->
    <div class="col-lg-4">
        <div class="dashboard-card h-100">
            <h5 class="mb-3"><i class="fas fa-lightbulb me-2 text-warning"></i>Financial Wellness Tips</h5>
            <div id="financial-tip"></div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <!-- Monthly Expense Breakdown -->
    <div class="col-12">
        <div class="dashboard-card">
            <h5 class="mb-3">Monthly Expense Breakdown</h5>
            <div style="height: 340px;">
                <canvas id="expenseBreakdownChart"></canvas>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    if (typeof Chart === 'undefined') {
        console.error('Chart.js is not loaded.');
        return;
    }
    if (typeof formatNepaliCurrency === 'undefined') {
        window.formatNepaliCurrency = function(num) { return 'Rs' + (num ? num.toFixed(2) : '0.00'); };
    }

    const tips = [
        {
            icon: 'fas fa-piggy-bank',
            text: '<strong>Automate Your Savings:</strong> Set up automatic transfers to your savings account each payday. Even small amounts add up!'
        },
        {
            icon: 'fas fa-file-invoice-dollar',
            text: '<strong>Review Subscriptions:</strong> Take a look at your monthly subscriptions. Cancel any you no longer use to free up cash.'
        },
        {
            icon: 'fas fa-chart-pie',
            text: '<strong>The 50/30/20 Rule:</strong> A simple budgeting guideline: 50% of your income for needs, 30% for wants, and 20% for savings.'
        },
        {
            icon: 'fas fa-shield-alt',
            text: '<strong>Emergency Fund:</strong> Build an emergency fund that covers 3-6 months of living expenses for unexpected events.'
        },
        {
            icon: 'fas fa-search-dollar',
            text: '<strong>Track Your Spending:</strong> Knowing where your money goes is the first step to taking control of your finances.'
        }
    ];

    const tipElement = document.getElementById('financial-tip');

    function displayAllTips() {
        if (!tipElement) return;
        let tipsHtml = '<ul class="list-unstyled mb-0">';
        tips.forEach(tip => {
            tipsHtml += `
                <li class="d-flex align-items-start mb-3">
                    <i class="${tip.icon} fa-lg me-3 text-primary mt-1"></i>
                    <p class="mb-0">${tip.text}</p>
                </li>
            `;
        });
        tipsHtml += '</ul>';
        tipElement.innerHTML = tipsHtml;
    }

    if (tipElement) {
        displayAllTips();
    }

        const expenseDataJSON = `<%- JSON.stringify(budgetUsage) %>`;
    try {
        const expenseData = JSON.parse(expenseDataJSON);
        const labels = Object.keys(expenseData);
        const data = Object.values(expenseData).map(d => d.spent);

        const expenseCtx = document.getElementById('expenseBreakdownChart');
        if (expenseCtx && labels.length > 0) {
            new Chart(expenseCtx.getContext('2d'), {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Expenses',
                        data: data,
                        backgroundColor: [
                            '#4F46E5', '#818CF8', '#A78BFA', '#F87171', '#FBBF24', '#34D399', '#FB923C', '#F472B6', '#60A5FA', '#A3E635', '#2DD4BF', '#C084FC'
                        ],
                        borderColor: '#fff',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed !== null) {
                                        label += formatNepaliCurrency(context.parsed);
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        } else if (expenseCtx) {
            const parent = expenseCtx.parentElement;
            parent.innerHTML = '<div class="text-center text-muted d-flex align-items-center justify-content-center h-100"><p>No expense data for this month.</p></div>';
        }
    } catch (e) {
        console.error('Failed to parse expense data:', e);
        const expenseCtx = document.getElementById('expenseBreakdownChart');
        if (expenseCtx) {
            const parent = expenseCtx.parentElement;
            parent.innerHTML = '<div class="text-center text-muted d-flex align-items-center justify-content-center h-100"><p>Could not load chart data.</p></div>';
        }
    }


});
</script>


